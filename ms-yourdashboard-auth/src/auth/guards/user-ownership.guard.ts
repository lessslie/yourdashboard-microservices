// src/auth/guards/user-ownership.guard.ts
import {
  Injectable,
  CanActivate,
  ExecutionContext,
  ForbiddenException,
  BadRequestException,
  Logger
} from '@nestjs/common';
import { validate as uuidValidate } from 'uuid';
import { UsuarioAutenticado } from '../interfaces/auth.interfaces';

@Injectable()
export class UserOwnershipGuard implements CanActivate {
  private readonly logger = new Logger(UserOwnershipGuard.name);

  canActivate(context: ExecutionContext): boolean {
    try {
      const request = context.switchToHttp().getRequest();
      
      // 1Ô∏è‚É£ VERIFICAR QUE req.user EXISTA (debe venir del JwtAuthGuard)
      const user: UsuarioAutenticado = request.user;
      if (!user) {
        this.logger.error('‚ùå req.user not found - JwtAuthGuard should run first');
        throw new ForbiddenException('Usuario no autenticado');
      }

      // 2Ô∏è‚É£ EXTRAER userId DE DIFERENTES LUGARES
      let userIdFromRequest: string | number | undefined;

      // Intentar desde query params (?userId=123)
      userIdFromRequest = request.query?.userId;

      // Si no est√° en query, intentar desde params (/:userId)
      if (!userIdFromRequest) {
        userIdFromRequest = request.params?.userId;
      }

      // Si no est√° en params, intentar desde body
      if (!userIdFromRequest) {
        userIdFromRequest = request.body?.userId || request.body?.usuario_principal_id;
      }

      // 3Ô∏è‚É£ VALIDAR QUE SE ENCONTR√ì userId
      if (!userIdFromRequest) {
        this.logger.warn('üö´ No userId found in request');
        throw new BadRequestException('userId es requerido en la petici√≥n');
      }

      // 4Ô∏è‚É£ VALIDAR FORMATO UUID Y CONVERTIR A STRING
      const requestedUserIdString = userIdFromRequest.toString();
      
      // CAMBIO CR√çTICO: Validar que sea un UUID v√°lido en lugar de n√∫mero
      if (!uuidValidate(requestedUserIdString)) {
        this.logger.warn(`üö´ Invalid userId UUID format: ${userIdFromRequest}`);
        throw new BadRequestException('userId debe ser un UUID v√°lido');
      }

      // 5Ô∏è‚É£ VERIFICAR QUE EL userId DEL REQUEST COINCIDA CON EL USUARIO AUTENTICADO
      // CAMBIO: Comparaci√≥n de strings en lugar de n√∫meros
      if (requestedUserIdString !== user.id) {
        this.logger.warn(
          `üö´ User ownership violation - Authenticated user: ${user.id}, Requested user: ${requestedUserIdString}`
        );
        throw new ForbiddenException('No tienes permisos para acceder a esta informaci√≥n');
      }

      // 6Ô∏è‚É£ ‚úÖ ACCESO AUTORIZADO - EL USUARIO EST√Å ACCEDIENDO A SUS PROPIOS DATOS
      this.logger.debug(`‚úÖ User ownership verified - User ${user.id} accessing own data`);
      return true;

    } catch (error) {
      // Si es una excepci√≥n conocida, re-lanzarla
      if (error instanceof ForbiddenException || error instanceof BadRequestException) {
        throw error;
      }

      // Para errores inesperados
      this.logger.error('‚ùå Unexpected error in user ownership check:', error);
      throw new ForbiddenException('Error verificando permisos de usuario');
    }
  }
}



