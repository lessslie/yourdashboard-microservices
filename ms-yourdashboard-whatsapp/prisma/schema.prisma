generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_eliminaciones {
  id                Int       @id @default(autoincrement())
  tabla             String?   @db.VarChar(50)
  registro_id       Int?
  datos_eliminados  Json?
  usuario_bd        String?   @db.VarChar(50)
  fecha_eliminacion DateTime? @default(now()) @db.Timestamp(6)
}

model conversations {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  whatsapp_account_id String            @db.Uuid
  phone               String?           @db.VarChar(20)
  name                String?           @db.VarChar(100)
  last_message        String?
  last_message_date   DateTime?         @db.Timestamp(6)
  whatsapp_accounts   whatsapp_accounts @relation(fields: [whatsapp_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversation_whatsapp")
  messages            messages[]

  @@index([whatsapp_account_id], map: "idx_conversations_account")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model cuentas_gmail_asociadas {
  id                       Int                    @id @default(autoincrement())
  usuario_principal_id     Int
  email_gmail              String                 @db.VarChar(255)
  nombre_cuenta            String                 @db.VarChar(255)
  google_id                String                 @unique @db.VarChar(255)
  access_token             String?
  refresh_token            String?
  token_expira_en          DateTime?              @db.Timestamp(6)
  fecha_conexion           DateTime?              @default(now()) @db.Timestamp(6)
  ultima_sincronizacion    DateTime?              @db.Timestamp(6)
  esta_activa              Boolean?               @default(true)
  consecutive_zero_syncs   Int?                   @default(0)
  alias_personalizado      String?                @db.VarChar(100)
  backfill_checkpoint_date DateTime?              @db.Date
  backfill_page_token      String?                @db.VarChar(255)
  usuarios_principales     usuarios_principales   @relation(fields: [usuario_principal_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cuentas_gmail_usuario_principal")
  emails_sincronizados     emails_sincronizados[]

  @@unique([usuario_principal_id, email_gmail])
  @@index([esta_activa], map: "idx_cuentas_gmail_activa")
  @@index([email_gmail], map: "idx_cuentas_gmail_email")
  @@index([google_id], map: "idx_cuentas_gmail_google_id")
  @@index([usuario_principal_id], map: "idx_cuentas_gmail_usuario_principal")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model emails_sincronizados {
  id                      Int                     @id @default(autoincrement())
  cuenta_gmail_id         Int
  gmail_message_id        String                  @db.VarChar(255)
  asunto                  String?
  remitente_email         String?
  remitente_nombre        String?
  destinatario_email      String?
  fecha_recibido          DateTime?               @db.Timestamp(6)
  esta_leido              Boolean?                @default(false)
  tiene_adjuntos          Boolean?                @default(false)
  etiquetas_gmail         String[]
  tamano_bytes            Int?
  fecha_sincronizado      DateTime?               @default(now()) @db.Timestamp(6)
  cuentas_gmail_asociadas cuentas_gmail_asociadas @relation(fields: [cuenta_gmail_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_emails_cuenta_gmail")

  @@unique([cuenta_gmail_id, gmail_message_id])
  @@index([cuenta_gmail_id], map: "idx_emails_cuenta_gmail")
  @@index([esta_leido], map: "idx_emails_esta_leido")
  @@index([fecha_recibido(sort: Desc)], map: "idx_emails_fecha_recibido")
  @@index([cuenta_gmail_id, esta_leido, tiene_adjuntos, fecha_recibido(sort: Desc)], map: "idx_emails_filters")
  @@index([gmail_message_id], map: "idx_emails_gmail_message_id")
  @@index([remitente_email], map: "idx_emails_remitente")
}

model messages {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id     String            @db.Uuid
  whatsapp_account_id String            @db.Uuid
  phone               String?           @db.VarChar(20)
  message             String?
  timestamp           DateTime?         @db.Timestamp(6)
  respondido          Boolean?          @default(false)
  canal               String?           @db.VarChar(20)
  categoria           String?           @db.VarChar(20)
  conversations       conversations     @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_message_conversation")
  whatsapp_accounts   whatsapp_accounts @relation(fields: [whatsapp_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_message_whatsapp")

  @@index([whatsapp_account_id], map: "idx_messages_account")
  @@index([conversation_id], map: "idx_messages_conversation")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sesiones_jwt {
  id                   Int                  @id @default(autoincrement())
  usuario_principal_id Int
  jwt_token            String
  expira_en            DateTime             @db.Timestamp(6)
  fecha_creacion       DateTime?            @default(now()) @db.Timestamp(6)
  esta_activa          Boolean?             @default(true)
  ip_origen            String?              @db.Inet
  user_agent           String?
  usuarios_principales usuarios_principales @relation(fields: [usuario_principal_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sesiones_usuario_principal")

  @@index([esta_activa], map: "idx_sesiones_activa")
  @@index([expira_en], map: "idx_sesiones_expira_en")
  @@index([jwt_token], map: "idx_sesiones_jwt_token")
  @@index([usuario_principal_id], map: "idx_sesiones_usuario_principal")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model usuarios_principales {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique @db.VarChar(255)
  password_hash           String
  nombre                  String                    @db.VarChar(255)
  fecha_registro          DateTime?                 @default(now()) @db.Timestamp(6)
  ultima_actualizacion    DateTime?                 @default(now()) @db.Timestamp(6)
  estado                  String?                   @default("activo") @db.VarChar(20)
  email_verificado        Boolean?                  @default(false)
  cuentas_gmail_asociadas cuentas_gmail_asociadas[]
  sesiones_jwt            sesiones_jwt[]
  whatsapp_accounts       whatsapp_accounts[]

  @@index([email], map: "idx_usuarios_principales_email")
  @@index([estado], map: "idx_usuarios_principales_estado")
}

model whatsapp_accounts {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usuario_principal_id Int
  phone                String               @unique @db.VarChar(20)
  nombre_cuenta        String?              @db.VarChar(100)
  token                String?
  fecha_conexion       DateTime?            @default(now()) @db.Timestamp(6)
  esta_activa          Boolean?             @default(true)
  alias_personalizado  String?              @db.VarChar(100)
  phone_number_id      String?              @unique @db.VarChar(100)
  token_updated_at     DateTime?            @default(now()) @db.Timestamp(6)
  token_expires_at     DateTime?            @db.Timestamp(6)
  conversations        conversations[]
  messages             messages[]
  usuarios_principales usuarios_principales @relation(fields: [usuario_principal_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_whatsapp_usuario")

  @@index([usuario_principal_id], map: "idx_whatsapp_accounts_usuario")
}
